
server.port=1171
server.servlet-path=/

spring.application.name=config-server
eureka.client.serviceUrl.defaultZone=http://s1:1111/eureka/,http://s2:1112/eureka/

spring.profiles.active=true
spring.cloud.config.server.git.uri=http://101.201.72.4/yu.zhou/springcloud.git
spring.cloud.config.server.git.searchPaths=repo/config/{application}-config
spring.cloud.config.server.git.username=yu.zhou@zhiguoguo.com
spring.cloud.config.server.git.password=zY654321

#简单加密
security.user.name=user
security.user.password=e9a57444-2943-43f1-8b6c-3d9f206ffadf

#spring.cloud.config.server.git.uri=file://${user.home}/config-repo

#访问url：http://localhost:1171/config/model/master							/{application}/{profile}/{label}
#访问url：http://localhost:1171/master/feignserver-model.properties		/{label}/{application}-{profile}.properties



#org.springframework.cloud.netflix.eureka.EurekaInstanceConfigBean	服务实例类配置
#false	是否优先使用IP地址作为主机名的标识
#eureka.instance.perferIpAddress=false
#30s	Eureka客户端向服务端发送心跳时间间隔 
#eureka.instance.leaseRenewalIntervalInSeconds=30
#90s	Eureka服务端在收到最后一次心跳之后等待的时间上限。超过该上限时间后服务端会将该服务实例从服务清单中剔除，从而禁止服务调用请求被发送到该实例上
#eureka.instance.leaseExpirationDurationInSeconds=90
#80		非安全的通信端口号
#eureka.instance.nonSecurePort=81
#443	安全的通信端口号
#eureka.instance.securePort=443
#true	是否启用非安全的通信端口号
#eureka.instance.nonSecurePortEnabled=true
#false	是否启用安全的通信端口号
#eureka.instance.securePortEnabled=false

#rabbitmq
spring.rabbitmq.host=192.168.116.131
spring.rabbitmq.port=5672
spring.rabbitmq.username=cuish
spring.rabbitmq.password=zhiguoguo
#spring.rabbitmq.address=192.168.116.131:5672,192.168.116.132:5672,192.168.116.133:5672
#缓存已满时获取channel的等待时间
spring.rabbitmq.cache.channel.checkout-timeout=0
#缓存中保持的channel数量
spring.rabbitmq.cache.channel.size=0
#连接缓存的模式
spring.rabbitmq.cache.connection.mode=CHANNEL
#缓存的连接数
spring.rabbitmq.cache.connection.size=0
#连接超时参数，0为无穷大
spring.rabbitmq.connection-timeout=0
#默认创建一个AmqpAdmin的bean
spring.rabbitmq.dynamic=true
#容器的ack模式
#spring.rabbitmq.listener.acknowledge-mode=
#启动时自动启动容器
spring.rabbitmq.listener.auto-startup=true
#消费者的最小数量
#spring.rabbitmq.listener.concurrency=
#投递失败时是否重新排队
spring.rabbitmq.listener.default-requeue-rejected=true
#消费者的最大数量
#spring.rabbitmq.listener.max-concurrency=
#在单个请求中处理的消息个数，它应该大于等于事物数量
#spring.rabbitmq.listener.prefetch=
#不论是不是重试的发布
spring.rabbitmq.listener.retry.enabled=false
#第一次与第二次投递尝试的时间间隔
spring.rabbitmq.listener.retry.initial-interval=1000
#尝试投递消息的最大数量
spring.rabbitmq.listener.retry.max-attempts=3
#两次尝试的最大时间间隔
spring.rabbitmq.listener.retry.max-interval=10000
#上一次尝试时间间隔的乘数
spring.rabbitmq.listener.retry.multiplier=1.0
#不论是否有状态，都进行重试
spring.rabbitmq.listener.retry.stateless=true
#在一个事物中处理的消息数量。为了获得最佳效果，该值应设置为小于等于每个请求中处理的消息个数，即spring.rabbitmq.listener.prefetch的值
#spring.rabbitmq.transaction-size=
spring.rabbitmq.publisher-confirms=false
#开启publisher confirm机制
spring.rabbitmq.publisher-returns=false
#开启publisher return机制
spring.rabbitmq.requested-heartbeat=false
#请求心跳超时时间，单位为秒
spring.rabbitmq.requested-heartbeat=0
#启用ssl支持
spring.rabbitmq.ssl.enabled=false
#保存ssl证书的地址
#spring.rabbitmq.ssl.key-store=
#访问SSL证书的地址使用的密码
#spring.rabbitmq.key-store-password=
#ssl的可信地址
#spring.rabbitmq.ssl.trust-store=
#访问SSL证书的地址的可信地址密码
#spring.rabbitmq.ssl.trust-store-password=
#ssl算法，默认使用rabbit的客户端算法库
#spring.rabbitmq.algorithm=
#启用强制消息
spring.rabbitmq.template.mandatory=false
#receive方法的超时时间
spring.rabbitmq.template.receive-timeout=0
#sendAndReceive()方法的超时时间
spring.rabbitmq.template.reply-timeout=5000
#设置为true时RabbitTemplate能够实现重试
spring.rabbitmq.template.retry.enabled=false
#第一次与第二次发布的消息的时间间隔
spring.rabbitmq.template.retry.initial-interval=1000
#尝试发布消息的最大数量
spring.rabbitmq.template.retry.max-attempts=3
#尝试发布消息的最大时间间隔
spring.rabbitmq.template.max-interval=10000
#上一次尝试时间间隔的乘数
spring.rabbitmq.template.multiplier=1.0